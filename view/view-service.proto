syntax = "proto3";
package view;

import "google/api/annotations.proto";
import "github.com/fuserobotics/reporter/view/view.proto";
import "github.com/fuserobotics/statestream/config.proto";

message ListStatesRequest {
}

message ListStatesResponse {
  StateList list = 1;
}

message GetStateRequest {
  view.StateContext context = 1;
  StateQuery query = 2;
}

message GetStateResponse {
  view.StateReport state = 1;
}

message StateHistoryRequest {
  view.StateContext context = 1;
  StateHistoryQuery query = 2;
  // Optionally specify a stream config to do batching on the server
  stream.Config  stream_config = 3;
}

// Response in stream of state history.
// Messages will look like:
//  - status: 0, state: {state} (etc)
//  ! (stream closed here if not tailing)
//  - status: 1, state: nil (indicating end of initial set)
//  - status: 1, state: {latest tailed state}
message StateHistoryResponse {
  view.StateEntry state = 1;
  StateHistoryStatus status = 2;

  enum StateHistoryStatus {
    HISTORY_INITIAL_SET = 0;
    HISTORY_TAIL = 1;
  }
}

message BoundedStateHistoryRequest {
  view.StateContext context = 1;
  BoundedStateHistoryMode mode = 2;
  int64 mid_timestamp = 3;
  bool bounds_only = 4;

  enum BoundedStateHistoryMode {
    SNAPSHOT_BOUND = 0;
  }
}

message BoundedStateHistoryResponse {
  view.StateEntry state = 1;
  BoundedStateHistoryStatus status = 2;

  enum BoundedStateHistoryStatus {
    BOUNDED_HISTORY_STATUS_NONE = 0;
    BOUNDED_HISTORY_START_BOUND = 1;
    BOUNDED_HISTORY_END_BOUND = 2;
    BOUNDED_HISTORY_INITIAL_SET = 3;
    BOUNDED_HISTORY_TAIL = 4;
  }
}

service ReporterService {
  rpc ListStates(ListStatesRequest) returns (ListStatesResponse) {
    option (google.api.http) = {
      get: "/v1/view/all"
    };
  }
  rpc GetState(GetStateRequest) returns (GetStateResponse) {
    option (google.api.http) = {
      get: "/v1/view/{context.component}/{context.state_id}"
    };
  }
  rpc GetStateHistory(StateHistoryRequest) returns (stream StateHistoryResponse) {
    option (google.api.http) = {
      get: "/v1/view/{context.component}/{context.state_id}/history"
    };
  };
  rpc GetBoundedStateHistory(BoundedStateHistoryRequest) returns (stream BoundedStateHistoryResponse) {
    option (google.api.http) = {
      get: "/v1/view/{context.component}/{context.state_id}/boundedhistory"
    };
  };
}
