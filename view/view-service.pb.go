// Code generated by protoc-gen-go.
// source: github.com/fuserobotics/reporter/view/view-service.proto
// DO NOT EDIT!

/*
Package view is a generated protocol buffer package.

It is generated from these files:
	github.com/fuserobotics/reporter/view/view-service.proto
	github.com/fuserobotics/reporter/view/view.proto

It has these top-level messages:
	ListStatesRequest
	ListStatesResponse
	GetStateRequest
	GetStateResponse
	StateHistoryRequest
	StateHistoryResponse
	StateContext
	StateList
	StateListComponent
	StateListState
	StateQuery
	StateHistoryQuery
	StateReport
	StateEntry
*/
package view

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import stream "github.com/fuserobotics/statestream"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StateHistoryResponse_StateHistoryStatus int32

const (
	StateHistoryResponse_HISTORY_INITIAL_SET StateHistoryResponse_StateHistoryStatus = 0
	StateHistoryResponse_HISTORY_TAIL        StateHistoryResponse_StateHistoryStatus = 1
)

var StateHistoryResponse_StateHistoryStatus_name = map[int32]string{
	0: "HISTORY_INITIAL_SET",
	1: "HISTORY_TAIL",
}
var StateHistoryResponse_StateHistoryStatus_value = map[string]int32{
	"HISTORY_INITIAL_SET": 0,
	"HISTORY_TAIL":        1,
}

func (x StateHistoryResponse_StateHistoryStatus) String() string {
	return proto.EnumName(StateHistoryResponse_StateHistoryStatus_name, int32(x))
}
func (StateHistoryResponse_StateHistoryStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 0}
}

type ListStatesRequest struct {
}

func (m *ListStatesRequest) Reset()                    { *m = ListStatesRequest{} }
func (m *ListStatesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListStatesRequest) ProtoMessage()               {}
func (*ListStatesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ListStatesResponse struct {
	List *StateList `protobuf:"bytes,1,opt,name=list" json:"list,omitempty"`
}

func (m *ListStatesResponse) Reset()                    { *m = ListStatesResponse{} }
func (m *ListStatesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListStatesResponse) ProtoMessage()               {}
func (*ListStatesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListStatesResponse) GetList() *StateList {
	if m != nil {
		return m.List
	}
	return nil
}

type GetStateRequest struct {
	Context *StateContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	Query   *StateQuery   `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
}

func (m *GetStateRequest) Reset()                    { *m = GetStateRequest{} }
func (m *GetStateRequest) String() string            { return proto.CompactTextString(m) }
func (*GetStateRequest) ProtoMessage()               {}
func (*GetStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetStateRequest) GetContext() *StateContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *GetStateRequest) GetQuery() *StateQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

type GetStateResponse struct {
	State *StateReport `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
}

func (m *GetStateResponse) Reset()                    { *m = GetStateResponse{} }
func (m *GetStateResponse) String() string            { return proto.CompactTextString(m) }
func (*GetStateResponse) ProtoMessage()               {}
func (*GetStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetStateResponse) GetState() *StateReport {
	if m != nil {
		return m.State
	}
	return nil
}

type StateHistoryRequest struct {
	Context *StateContext      `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	Query   *StateHistoryQuery `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
	// Optionally specify a stream config to do batching on the server
	StreamConfig *stream.Config `protobuf:"bytes,3,opt,name=stream_config,json=streamConfig" json:"stream_config,omitempty"`
}

func (m *StateHistoryRequest) Reset()                    { *m = StateHistoryRequest{} }
func (m *StateHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*StateHistoryRequest) ProtoMessage()               {}
func (*StateHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StateHistoryRequest) GetContext() *StateContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *StateHistoryRequest) GetQuery() *StateHistoryQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *StateHistoryRequest) GetStreamConfig() *stream.Config {
	if m != nil {
		return m.StreamConfig
	}
	return nil
}

// Response in stream of state history.
// Messages will look like:
//  - status: 0, state: {state} (etc)
//  ! (stream closed here if not tailing)
//  - status: 1, state: nil (indicating end of initial set)
//  - status: 1, state: {latest tailed state}
type StateHistoryResponse struct {
	State  *StateEntry                             `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
	Status StateHistoryResponse_StateHistoryStatus `protobuf:"varint,2,opt,name=status,enum=view.StateHistoryResponse_StateHistoryStatus" json:"status,omitempty"`
}

func (m *StateHistoryResponse) Reset()                    { *m = StateHistoryResponse{} }
func (m *StateHistoryResponse) String() string            { return proto.CompactTextString(m) }
func (*StateHistoryResponse) ProtoMessage()               {}
func (*StateHistoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StateHistoryResponse) GetState() *StateEntry {
	if m != nil {
		return m.State
	}
	return nil
}

func init() {
	proto.RegisterType((*ListStatesRequest)(nil), "view.ListStatesRequest")
	proto.RegisterType((*ListStatesResponse)(nil), "view.ListStatesResponse")
	proto.RegisterType((*GetStateRequest)(nil), "view.GetStateRequest")
	proto.RegisterType((*GetStateResponse)(nil), "view.GetStateResponse")
	proto.RegisterType((*StateHistoryRequest)(nil), "view.StateHistoryRequest")
	proto.RegisterType((*StateHistoryResponse)(nil), "view.StateHistoryResponse")
	proto.RegisterEnum("view.StateHistoryResponse_StateHistoryStatus", StateHistoryResponse_StateHistoryStatus_name, StateHistoryResponse_StateHistoryStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ReporterService service

type ReporterServiceClient interface {
	ListStates(ctx context.Context, in *ListStatesRequest, opts ...grpc.CallOption) (*ListStatesResponse, error)
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
	GetStateHistory(ctx context.Context, in *StateHistoryRequest, opts ...grpc.CallOption) (ReporterService_GetStateHistoryClient, error)
}

type reporterServiceClient struct {
	cc *grpc.ClientConn
}

func NewReporterServiceClient(cc *grpc.ClientConn) ReporterServiceClient {
	return &reporterServiceClient{cc}
}

func (c *reporterServiceClient) ListStates(ctx context.Context, in *ListStatesRequest, opts ...grpc.CallOption) (*ListStatesResponse, error) {
	out := new(ListStatesResponse)
	err := grpc.Invoke(ctx, "/view.ReporterService/ListStates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reporterServiceClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := grpc.Invoke(ctx, "/view.ReporterService/GetState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reporterServiceClient) GetStateHistory(ctx context.Context, in *StateHistoryRequest, opts ...grpc.CallOption) (ReporterService_GetStateHistoryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ReporterService_serviceDesc.Streams[0], c.cc, "/view.ReporterService/GetStateHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &reporterServiceGetStateHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReporterService_GetStateHistoryClient interface {
	Recv() (*StateHistoryResponse, error)
	grpc.ClientStream
}

type reporterServiceGetStateHistoryClient struct {
	grpc.ClientStream
}

func (x *reporterServiceGetStateHistoryClient) Recv() (*StateHistoryResponse, error) {
	m := new(StateHistoryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ReporterService service

type ReporterServiceServer interface {
	ListStates(context.Context, *ListStatesRequest) (*ListStatesResponse, error)
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	GetStateHistory(*StateHistoryRequest, ReporterService_GetStateHistoryServer) error
}

func RegisterReporterServiceServer(s *grpc.Server, srv ReporterServiceServer) {
	s.RegisterService(&_ReporterService_serviceDesc, srv)
}

func _ReporterService_ListStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServiceServer).ListStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/view.ReporterService/ListStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServiceServer).ListStates(ctx, req.(*ListStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReporterService_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServiceServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/view.ReporterService/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServiceServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReporterService_GetStateHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StateHistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReporterServiceServer).GetStateHistory(m, &reporterServiceGetStateHistoryServer{stream})
}

type ReporterService_GetStateHistoryServer interface {
	Send(*StateHistoryResponse) error
	grpc.ServerStream
}

type reporterServiceGetStateHistoryServer struct {
	grpc.ServerStream
}

func (x *reporterServiceGetStateHistoryServer) Send(m *StateHistoryResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ReporterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "view.ReporterService",
	HandlerType: (*ReporterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStates",
			Handler:    _ReporterService_ListStates_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _ReporterService_GetState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStateHistory",
			Handler:       _ReporterService_GetStateHistory_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() {
	proto.RegisterFile("github.com/fuserobotics/reporter/view/view-service.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x53, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xfd, 0x9c, 0xaf, 0x2d, 0xe8, 0x12, 0x92, 0xf4, 0xa6, 0xd0, 0x10, 0xb1, 0x40, 0x46, 0x2a,
	0x2c, 0x88, 0xdd, 0xa6, 0x8b, 0x52, 0xb1, 0xa8, 0xaa, 0x2a, 0xa2, 0x96, 0x22, 0x10, 0xe3, 0xb0,
	0x60, 0x15, 0x39, 0x66, 0xea, 0x8e, 0x94, 0x7a, 0xdc, 0x99, 0x71, 0xa0, 0x42, 0xdd, 0xb0, 0x65,
	0xc9, 0x43, 0xf0, 0x26, 0xbc, 0x00, 0xaf, 0xc0, 0x8a, 0xa7, 0x40, 0x9e, 0x19, 0x13, 0xa7, 0x01,
	0xf1, 0xb3, 0x89, 0xe2, 0x73, 0xee, 0x39, 0xf7, 0xcc, 0x9d, 0x3b, 0xf0, 0x38, 0x61, 0xea, 0x34,
	0x9f, 0x78, 0x31, 0x3f, 0xf3, 0x4f, 0x72, 0x49, 0x05, 0x9f, 0x70, 0xc5, 0x62, 0xe9, 0x0b, 0x9a,
	0x71, 0xa1, 0xa8, 0xf0, 0x67, 0x8c, 0xbe, 0xd1, 0x3f, 0x3d, 0x49, 0xc5, 0x8c, 0xc5, 0xd4, 0xcb,
	0x04, 0x57, 0x1c, 0x57, 0x0a, 0xac, 0x7b, 0x37, 0xe1, 0x3c, 0x99, 0x52, 0x3f, 0xca, 0x98, 0x1f,
	0xa5, 0x29, 0x57, 0x91, 0x62, 0x3c, 0x95, 0xa6, 0xa6, 0xbb, 0xfd, 0xe7, 0xee, 0xbf, 0x53, 0x48,
	0x15, 0x29, 0x2a, 0x95, 0xa0, 0xd1, 0x99, 0x1f, 0xf3, 0xf4, 0x84, 0x25, 0x46, 0xe1, 0xb6, 0x61,
	0x7d, 0xc8, 0xa4, 0x0a, 0x35, 0x4f, 0xe8, 0x79, 0x4e, 0xa5, 0x72, 0xf7, 0x01, 0xab, 0xa0, 0xcc,
	0x78, 0x2a, 0x29, 0xde, 0x87, 0x95, 0x29, 0x93, 0xaa, 0xe3, 0xdc, 0x73, 0x1e, 0xde, 0xe8, 0x37,
	0x3d, 0xdd, 0x57, 0xd7, 0x14, 0xc5, 0x44, 0x93, 0x6e, 0x02, 0xcd, 0xa7, 0xd4, 0x28, 0xad, 0x1b,
	0x3e, 0x82, 0x6b, 0x31, 0x4f, 0x15, 0x7d, 0x5b, 0x4a, 0xb1, 0x22, 0x3d, 0x32, 0x0c, 0x29, 0x4b,
	0x70, 0x0b, 0x56, 0xcf, 0x73, 0x2a, 0x2e, 0x3a, 0x35, 0x5d, 0xdb, 0xaa, 0xd4, 0xbe, 0x28, 0x70,
	0x62, 0x68, 0xf7, 0x09, 0xb4, 0xe6, 0x8d, 0x6c, 0xc2, 0x07, 0xb0, 0xaa, 0x0f, 0x6a, 0xfb, 0xac,
	0x57, 0xb4, 0x44, 0x8f, 0x8c, 0x18, 0xde, 0xfd, 0xe4, 0x40, 0x5b, 0xc3, 0xc7, 0x4c, 0x2a, 0x2e,
	0x2e, 0xfe, 0x2d, 0x6a, 0x6f, 0x31, 0xea, 0x66, 0xa5, 0xd6, 0xfa, 0x56, 0x13, 0xe3, 0x2e, 0xdc,
	0x34, 0x37, 0x30, 0x36, 0x37, 0xd0, 0xf9, 0x5f, 0xcb, 0x1a, 0x9e, 0x41, 0xbd, 0x23, 0x8d, 0x92,
	0xba, 0xf9, 0x34, 0x5f, 0xee, 0x67, 0x07, 0x36, 0x16, 0x93, 0xda, 0xb3, 0x6e, 0x2d, 0x9e, 0xb5,
	0x3a, 0xa7, 0x41, 0xaa, 0x8a, 0xae, 0x9a, 0xc6, 0x01, 0xac, 0x15, 0x7f, 0x72, 0xa9, 0x53, 0x36,
	0xfa, 0xbd, 0xe5, 0x94, 0xa5, 0xe7, 0x02, 0x18, 0x6a, 0x11, 0xb1, 0x62, 0xf7, 0x00, 0x70, 0x99,
	0xc5, 0x4d, 0x68, 0x1f, 0x07, 0xe1, 0xe8, 0x39, 0x79, 0x35, 0x0e, 0x9e, 0x05, 0xa3, 0xe0, 0x70,
	0x38, 0x0e, 0x07, 0xa3, 0xd6, 0x7f, 0xd8, 0x82, 0x7a, 0x49, 0x8c, 0x0e, 0x83, 0x61, 0xcb, 0xe9,
	0x7f, 0xab, 0x41, 0x93, 0xd8, 0xbd, 0x0d, 0xcd, 0x53, 0xc0, 0x97, 0x00, 0xf3, 0x3d, 0x43, 0x3b,
	0xbf, 0xa5, 0x75, 0xec, 0x76, 0x96, 0x09, 0x13, 0xd8, 0xdd, 0x78, 0xff, 0xe5, 0xeb, 0xc7, 0x5a,
	0x03, 0xeb, 0xfe, 0x6c, 0xc7, 0x3c, 0x86, 0x68, 0x3a, 0x45, 0x01, 0xd7, 0xcb, 0xd5, 0xc0, 0x5b,
	0x46, 0x7b, 0x65, 0x27, 0xbb, 0xb7, 0xaf, 0xc2, 0xd6, 0x70, 0x4f, 0x1b, 0xee, 0xa0, 0xff, 0xc3,
	0xf0, 0x9d, 0xbd, 0xed, 0xe2, 0x4d, 0x65, 0x3c, 0xa5, 0xa9, 0xba, 0x9c, 0x63, 0x7a, 0xc4, 0x63,
	0xf6, 0xfa, 0x12, 0x3f, 0x38, 0xf3, 0xc5, 0xb7, 0x33, 0xc2, 0x3b, 0x3f, 0x1b, 0xb5, 0xe9, 0xdf,
	0xfd, 0xf5, 0x2d, 0xb8, 0x07, 0x3a, 0xc3, 0x3e, 0xee, 0xfd, 0x65, 0x06, 0xff, 0xd4, 0x18, 0x6d,
	0x3b, 0x93, 0x35, 0xfd, 0xb8, 0x77, 0xbf, 0x07, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x05, 0x00, 0x5e,
	0xa0, 0x04, 0x00, 0x00,
}
