// Code generated by protoc-gen-go.
// source: github.com/fuserobotics/reporter/remote/reporter-remote.proto
// DO NOT EDIT!

/*
Package remote is a generated protocol buffer package.

It is generated from these files:
	github.com/fuserobotics/reporter/remote/reporter-remote.proto

It has these top-level messages:
	GetRemoteConfigRequest
	GetRemoteConfigResponse
*/
package remote

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/fuserobotics/reporter/api"
import _ "github.com/fuserobotics/statestream"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetRemoteConfigRequest struct {
}

func (m *GetRemoteConfigRequest) Reset()                    { *m = GetRemoteConfigRequest{} }
func (m *GetRemoteConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRemoteConfigRequest) ProtoMessage()               {}
func (*GetRemoteConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetRemoteConfigResponse struct {
}

func (m *GetRemoteConfigResponse) Reset()                    { *m = GetRemoteConfigResponse{} }
func (m *GetRemoteConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRemoteConfigResponse) ProtoMessage()               {}
func (*GetRemoteConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*GetRemoteConfigRequest)(nil), "remote.GetRemoteConfigRequest")
	proto.RegisterType((*GetRemoteConfigResponse)(nil), "remote.GetRemoteConfigResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ReporterRemoteService service

type ReporterRemoteServiceClient interface {
	GetRemoteConfig(ctx context.Context, in *GetRemoteConfigRequest, opts ...grpc.CallOption) (*GetRemoteConfigResponse, error)
}

type reporterRemoteServiceClient struct {
	cc *grpc.ClientConn
}

func NewReporterRemoteServiceClient(cc *grpc.ClientConn) ReporterRemoteServiceClient {
	return &reporterRemoteServiceClient{cc}
}

func (c *reporterRemoteServiceClient) GetRemoteConfig(ctx context.Context, in *GetRemoteConfigRequest, opts ...grpc.CallOption) (*GetRemoteConfigResponse, error) {
	out := new(GetRemoteConfigResponse)
	err := grpc.Invoke(ctx, "/remote.ReporterRemoteService/GetRemoteConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ReporterRemoteService service

type ReporterRemoteServiceServer interface {
	GetRemoteConfig(context.Context, *GetRemoteConfigRequest) (*GetRemoteConfigResponse, error)
}

func RegisterReporterRemoteServiceServer(s *grpc.Server, srv ReporterRemoteServiceServer) {
	s.RegisterService(&_ReporterRemoteService_serviceDesc, srv)
}

func _ReporterRemoteService_GetRemoteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemoteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterRemoteServiceServer).GetRemoteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.ReporterRemoteService/GetRemoteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterRemoteServiceServer).GetRemoteConfig(ctx, req.(*GetRemoteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReporterRemoteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "remote.ReporterRemoteService",
	HandlerType: (*ReporterRemoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRemoteConfig",
			Handler:    _ReporterRemoteService_GetRemoteConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() {
	proto.RegisterFile("github.com/fuserobotics/reporter/remote/reporter-remote.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x90, 0x3d, 0x4e, 0xc4, 0x30,
	0x10, 0x85, 0x05, 0xc5, 0x16, 0x6e, 0x10, 0x46, 0xfc, 0x6c, 0x84, 0x40, 0x4a, 0x4f, 0x0c, 0x6c,
	0x4d, 0x45, 0x41, 0x1f, 0x4e, 0xe0, 0x58, 0xb3, 0xc6, 0x12, 0xf6, 0x98, 0x99, 0x49, 0x0e, 0x40,
	0xc1, 0x05, 0x38, 0x1a, 0x57, 0xe0, 0x20, 0x88, 0x38, 0xa1, 0x00, 0xa2, 0x2d, 0x9f, 0xde, 0x7c,
	0xfa, 0xfc, 0xac, 0xee, 0x7c, 0x90, 0xa7, 0xbe, 0x6b, 0x1c, 0x46, 0xb3, 0xed, 0x19, 0x08, 0x3b,
	0x94, 0xe0, 0xd8, 0x10, 0x64, 0x24, 0x01, 0x32, 0x04, 0x11, 0x05, 0x7e, 0xf2, 0x55, 0xc9, 0x4d,
	0x26, 0x14, 0xd4, 0xab, 0x92, 0xaa, 0x73, 0x8f, 0xe8, 0x9f, 0xc1, 0xd8, 0x1c, 0x8c, 0x4d, 0x09,
	0xc5, 0x4a, 0xc0, 0xc4, 0xe5, 0xaa, 0xda, 0xec, 0x94, 0x7c, 0x73, 0x73, 0x98, 0xa0, 0xeb, 0x25,
	0x88, 0xc5, 0x0a, 0xb0, 0x10, 0xd8, 0x68, 0x1c, 0xa6, 0x6d, 0xf0, 0x85, 0xa8, 0xcf, 0xd4, 0xc9,
	0x03, 0x48, 0x3b, 0xbe, 0xe8, 0x7e, 0x2c, 0x5a, 0x78, 0xe9, 0x81, 0xa5, 0x5e, 0xab, 0xd3, 0x3f,
	0x0d, 0x67, 0x4c, 0x0c, 0xb7, 0x6f, 0x7b, 0xea, 0xb8, 0x9d, 0xcc, 0xe5, 0xe0, 0x11, 0x68, 0x08,
	0x0e, 0x74, 0x54, 0x07, 0xbf, 0x20, 0x7d, 0xd1, 0x4c, 0xeb, 0xff, 0xf7, 0x54, 0x97, 0x8b, 0x7d,
	0xb1, 0xd5, 0xeb, 0xd7, 0x8f, 0xcf, 0xf7, 0xfd, 0x23, 0x7d, 0x68, 0x86, 0x9b, 0xf9, 0x67, 0xcb,
	0x86, 0x6e, 0x35, 0x8e, 0xd8, 0x7c, 0x05, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x86, 0xa7, 0x40, 0x92,
	0x01, 0x00, 0x00,
}
