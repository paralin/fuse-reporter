syntax = "proto3";
package api;

import "google/api/annotations.proto";
import "github.com/fuserobotics/reporter/api/reporter.proto";
import "github.com/fuserobotics/statestream/config.proto";

// Register or update a state config
message RegisterStateRequest {
  api.StateContext context = 1;
  stream.Config stream_config = 2;
}

message RegisterStateResponse {
}

message RecordStateRequest {
  api.StateContext context = 1;
  api.StateReport report = 2;
}

message RecordStateResponse {
}

message ListStatesRequest {
}

message ListStatesResponse {
  StateList list = 1;
}

message GetStateRequest {
  api.StateContext context = 1;
  StateQuery query = 2;
}

message GetStateResponse {
  StateReport state = 1;
}

message ListRemotesRequest {
}

message ListRemotesResponse {
  api.RemoteList list = 1;
}

message CreateRemoteRequest {
  api.RemoteContext context = 1;
  string endpoint = 2;
}

message CreateRemoteResponse {
}

service ReporterService {
  rpc RegisterState(RegisterStateRequest) returns (RegisterStateResponse) {
    option (google.api.http) = {
      post: "/v1/local/{context.component}/{context.state_id}/create"
      body: "stream_config"
    };
  };
  rpc RecordState(RecordStateRequest) returns (RecordStateResponse) {
    option (google.api.http) = {
      post: "/v1/local/{context.component}/{context.state_id}"
      body: "report"
    };
  };
  rpc ListStates(ListStatesRequest) returns (ListStatesResponse) {
    option (google.api.http) = {
      get: "/v1/local/all"
    };
  }
  rpc GetState(GetStateRequest) returns (GetStateResponse) {
    option (google.api.http) = {
      get: "/v1/local/{context.component}/{context.state_id}"
    };
  }
  rpc ListRemotes(ListRemotesRequest) returns (ListRemotesResponse) {
    option (google.api.http) = {
      get: "/v1/remote"
    };
  }
  rpc CreateRemote(CreateRemoteRequest) returns (CreateRemoteResponse) {
    option (google.api.http) = {
      post: "/v1/remote/{context.remote_id}"
      body: "endpoint"
    };
  }
}
