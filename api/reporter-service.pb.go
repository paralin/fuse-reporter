// Code generated by protoc-gen-go.
// source: github.com/fuserobotics/reporter/api/reporter-service.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	github.com/fuserobotics/reporter/api/reporter-service.proto
	github.com/fuserobotics/reporter/api/reporter.proto

It has these top-level messages:
	RegisterStateRequest
	RegisterStateResponse
	RecordStateRequest
	RecordStateResponse
	StateContext
	StateReport
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import stream "github.com/fuserobotics/statestream"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Register or update a state config
type RegisterStateRequest struct {
	Context      *StateContext  `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	StreamConfig *stream.Config `protobuf:"bytes,2,opt,name=stream_config,json=streamConfig" json:"stream_config,omitempty"`
}

func (m *RegisterStateRequest) Reset()                    { *m = RegisterStateRequest{} }
func (m *RegisterStateRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterStateRequest) ProtoMessage()               {}
func (*RegisterStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegisterStateRequest) GetContext() *StateContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RegisterStateRequest) GetStreamConfig() *stream.Config {
	if m != nil {
		return m.StreamConfig
	}
	return nil
}

type RegisterStateResponse struct {
}

func (m *RegisterStateResponse) Reset()                    { *m = RegisterStateResponse{} }
func (m *RegisterStateResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterStateResponse) ProtoMessage()               {}
func (*RegisterStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type RecordStateRequest struct {
	Context *StateContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	Report  *StateReport  `protobuf:"bytes,2,opt,name=report" json:"report,omitempty"`
}

func (m *RecordStateRequest) Reset()                    { *m = RecordStateRequest{} }
func (m *RecordStateRequest) String() string            { return proto.CompactTextString(m) }
func (*RecordStateRequest) ProtoMessage()               {}
func (*RecordStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RecordStateRequest) GetContext() *StateContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *RecordStateRequest) GetReport() *StateReport {
	if m != nil {
		return m.Report
	}
	return nil
}

type RecordStateResponse struct {
}

func (m *RecordStateResponse) Reset()                    { *m = RecordStateResponse{} }
func (m *RecordStateResponse) String() string            { return proto.CompactTextString(m) }
func (*RecordStateResponse) ProtoMessage()               {}
func (*RecordStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*RegisterStateRequest)(nil), "api.RegisterStateRequest")
	proto.RegisterType((*RegisterStateResponse)(nil), "api.RegisterStateResponse")
	proto.RegisterType((*RecordStateRequest)(nil), "api.RecordStateRequest")
	proto.RegisterType((*RecordStateResponse)(nil), "api.RecordStateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ReporterService service

type ReporterServiceClient interface {
	RecordState(ctx context.Context, in *RecordStateRequest, opts ...grpc.CallOption) (*RecordStateResponse, error)
}

type reporterServiceClient struct {
	cc *grpc.ClientConn
}

func NewReporterServiceClient(cc *grpc.ClientConn) ReporterServiceClient {
	return &reporterServiceClient{cc}
}

func (c *reporterServiceClient) RecordState(ctx context.Context, in *RecordStateRequest, opts ...grpc.CallOption) (*RecordStateResponse, error) {
	out := new(RecordStateResponse)
	err := grpc.Invoke(ctx, "/api.ReporterService/RecordState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ReporterService service

type ReporterServiceServer interface {
	RecordState(context.Context, *RecordStateRequest) (*RecordStateResponse, error)
}

func RegisterReporterServiceServer(s *grpc.Server, srv ReporterServiceServer) {
	s.RegisterService(&_ReporterService_serviceDesc, srv)
}

func _ReporterService_RecordState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReporterServiceServer).RecordState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ReporterService/RecordState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReporterServiceServer).RecordState(ctx, req.(*RecordStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReporterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ReporterService",
	HandlerType: (*ReporterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordState",
			Handler:    _ReporterService_RecordState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() {
	proto.RegisterFile("github.com/fuserobotics/reporter/api/reporter-service.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x51, 0x4d, 0x4e, 0x72, 0x31,
	0x14, 0xcd, 0xe3, 0x4b, 0xf8, 0x92, 0xe2, 0xef, 0x53, 0x02, 0x21, 0x0e, 0xcc, 0x1b, 0x91, 0x18,
	0x5f, 0x05, 0x66, 0x32, 0x32, 0xec, 0xa0, 0x2c, 0x80, 0x94, 0xc7, 0xe5, 0xd9, 0x28, 0xbd, 0xb5,
	0xbd, 0x10, 0x12, 0xc3, 0x44, 0x97, 0xe0, 0xc0, 0x85, 0xb9, 0x05, 0x17, 0x62, 0x68, 0xab, 0xa8,
	0xc4, 0x81, 0x0e, 0xef, 0xb9, 0xe7, 0x9c, 0x9e, 0xde, 0xc3, 0xfa, 0xa5, 0xa2, 0xeb, 0xf9, 0x38,
	0x2f, 0x70, 0xc6, 0xa7, 0x73, 0x07, 0x16, 0xc7, 0x48, 0xaa, 0x70, 0xdc, 0x82, 0x41, 0x4b, 0x60,
	0xb9, 0x34, 0xea, 0x63, 0x38, 0x77, 0x60, 0x17, 0xaa, 0x80, 0xdc, 0x58, 0x24, 0x4c, 0xff, 0x49,
	0xa3, 0x5a, 0x27, 0x25, 0x62, 0x79, 0x0b, 0x9e, 0x27, 0xb5, 0x46, 0x92, 0xa4, 0x50, 0xbb, 0x40,
	0x69, 0xf5, 0x7e, 0xe5, 0x1f, 0x45, 0x17, 0x3f, 0x89, 0x1c, 0x49, 0x02, 0x47, 0x16, 0xe4, 0x8c,
	0x17, 0xa8, 0xa7, 0xaa, 0x0c, 0x8a, 0x6c, 0xc9, 0x8e, 0x05, 0x94, 0xca, 0x11, 0xd8, 0xe1, 0x9a,
	0x23, 0xe0, 0x6e, 0x0e, 0x8e, 0xd2, 0x33, 0xf6, 0xbf, 0x40, 0x4d, 0xb0, 0xa4, 0x66, 0x72, 0x9a,
	0xb4, 0x6b, 0xdd, 0xc3, 0x5c, 0x1a, 0x95, 0x7b, 0xce, 0x20, 0x2c, 0xc4, 0x3b, 0x23, 0xed, 0xb1,
	0xdd, 0xe0, 0x3d, 0x0a, 0xde, 0xcd, 0x8a, 0x97, 0xec, 0xe5, 0x01, 0xcd, 0x07, 0x1e, 0x15, 0x3b,
	0x61, 0x0c, 0x53, 0xd6, 0x60, 0xf5, 0x6f, 0x2f, 0x3b, 0x83, 0xda, 0x41, 0x76, 0xc3, 0x52, 0x01,
	0x05, 0xda, 0xc9, 0xdf, 0x03, 0xb5, 0x59, 0x35, 0x5c, 0x26, 0x26, 0x39, 0xd8, 0x70, 0x85, 0xc7,
	0x45, 0xdc, 0x67, 0x75, 0x76, 0xf4, 0xe5, 0xb1, 0x90, 0xa1, 0xfb, 0x9c, 0xb0, 0x7d, 0x11, 0x6f,
	0x3b, 0x0c, 0xd5, 0xa5, 0x8f, 0x09, 0xab, 0x7d, 0xe2, 0xa6, 0x0d, 0x6f, 0xba, 0x1d, 0xb5, 0xd5,
	0xdc, 0x5e, 0xc4, 0xaf, 0x5d, 0x3d, 0xbc, 0xbc, 0x3e, 0x55, 0xfa, 0x59, 0x87, 0x2f, 0x3a, 0xfc,
	0x3e, 0xa6, 0x5d, 0xb7, 0x65, 0x50, 0x83, 0xa6, 0xd5, 0x06, 0xf3, 0x85, 0x8d, 0xd4, 0x64, 0xc5,
	0xad, 0xf7, 0xb9, 0x8c, 0x81, 0xc7, 0x55, 0xdf, 0x5b, 0xef, 0x2d, 0x00, 0x00, 0xff, 0xff, 0x0d,
	0x8f, 0xf7, 0x3f, 0x80, 0x02, 0x00, 0x00,
}
